<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
    <!--设置静态资源不拦截-->
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/js/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    <security:http pattern="/login.html" security="none"/>
    <!--  拦截规则 use-expressions: 是否使用spel表达式 true: access的值可以填表达式(hasRole, hasAuthority, hasAny...-->
    <security:http auto-config="true" use-expressions="true">
        <!--        拦截的url 可以配置多个-->
        <security:intercept-url pattern="/**" access="isAuthenticated()"/>
        <security:form-login login-page="/login.html"
                             login-processing-url="/login.do"
                             username-parameter="username"
                             default-target-url="/pages/main.html"
                             always-use-default-target="true"/>
        <security:headers>
            <security:frame-options policy="SAMEORIGIN"></security:frame-options>
        </security:headers>
        <security:csrf disabled="true"/>
<!--        退出登录-->
        <security:logout logout-url="/logout.do" logout-success-url="/login.html" invalidate-session="true"/>
    </security:http>

    <!--    认证管理器  -->
    <security:authentication-manager>
        <!--        认证信息提供者 提供登录的用户的用户名密码 权限集合等 user-service-ref 表示提供spring容器中的一个对象这个对象要实现了UserDetailsService
                      一旦配置了上面这个就不需要security:user-service -->
        <security:authentication-provider user-service-ref="springSecurityService">
<!--            密码加密-->
            <security:password-encoder ref="encoder"/>
        </security:authentication-provider>
    </security:authentication-manager>
<!--    <security:global-method-security pre-post-annotations="enabled"/>-->
<!--    注册springSecurityUserService 和密码加密器-->
    <bean id="springSecurityService" class="com.itheima.health.security.SpringSecurityUserService"/>
    <bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
<!--    权限控制注解支持 这个必须要开才能读到controller SpringSecurityUserService上不要打注解就行了 你用了bean对象的话 compment的注解也和这个没啥关系 Compment的注解式spring去扫描的-->
    <security:global-method-security pre-post-annotations="enabled"/>
</beans>